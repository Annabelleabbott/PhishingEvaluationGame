from flask import request, jsonify, render_template
from flask_pymongo import PyMongo
import os
from pathlib import Path
from bson.json_util import dumps


def init_routes(app, mongo):
    @app.route('/')
    def index():
        collections = mongo.db.list_collection_names()
        return render_template('index.html', collections=collections)


    @app.route('/add_email')
    def add_email():
        email = {
            "subject": "Test Email",
            "content": "This is a test email.",
            "type": "Legitimate",
            "source": "Human"
        }
        mongo.db.emails.insert_one(email)
        return "Email added!"
    
    @app.route('/add_all_emails')
    def add_all_emails():
        # Directory path: go up one level and then into 'data/llm'
        directory_path = Path(__file__).parent.parent / 'data' / 'emails'/ 'llm' / 'linkedin'

        # Initialize a counter for email IDs
        email_id_counter = 1

        # Iterate over each file in the directory
        for file in directory_path.iterdir():
            if file.is_file():
                # Read the content of the file
                with open(file, 'r') as f:
                    content = f.read()

                # Create the email dictionary
                email = {
                    "email_id": f"email_{email_id_counter}",
                    "content": content,
                    "type": "Fake",
                    "source": "LLM"
                }

                # Insert into MongoDB
                mongo.db.emails.insert_one(email)

                # Increment the email ID counter
                email_id_counter += 1

        return f"{email_id_counter - 1} emails added!"
    
    @app.route('/api/next-email')
    def get_next_email():
        # Assuming 'emails' is your collection in MongoDB
        # Fetch one email from the collection
        email = mongo.db.emails.find_one({}, {'_id': 0})  # {'_id': 0} omits the MongoDB ID from the result

        if email:
            return dumps(email)
        else:
            return jsonify({"error": "No emails available"}), 404

    @app.route('/get_emails')
    def get_emails():
        emails = mongo.db.emails.find()
        return str(list(emails))

    @app.route('/submit_user_data')
    def submit_user_data():
        """
        Category 1 condition: user response if they believe email was generated by LLM or Human (determined by buttons selected)
        Category 2 condition: user response if they believe email is phishing email or legitamate email
        """
        # Here you can access the data sent from the frontend using request.form or request.json
        data = request.json
        email_id = data.get('emailId')
        user_response = data.get('response')

        if not email_id or not user_response:
            return jsonify({"error": "Missing emailId or response"}), 400

        # Save the response to the database
        # This is a placeholder; you'll need to implement the actual save logic
        # For example: mongo.db.responses.insert_one({'email_id': email_id, 'response': user_response})

        return jsonify({"message": "Response saved successfully"})
